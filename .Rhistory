data <- read.csv("group_16.csv", header= TRUE, sep=";")
# preprocessing
# Split the string into parts
split_parts <- strsplit(data$Antwort.1, "; ")
split_parts2 <- strsplit(data$Antwort.2, "; ")
split_parts3 <- strsplit(data$Antwort.3, "; ")
# Create new columns based on split parts
new_columns <- t(sapply(split_parts, function(x) {
parts <- strsplit(x, ": ")
setNames(as.numeric(sapply(parts, function(y) y[2])), sapply(parts, function(y) paste0("Antwort1", y[1])))
}))
new_columns2 <- t(sapply(split_parts2, function(x) {
parts <- strsplit(x, ": ")
setNames(as.numeric(sapply(parts, function(y) y[2])), sapply(parts, function(y) paste0("Antwort2", y[1])))
}))
new_columns3 <- t(sapply(split_parts3, function(x) {
parts <- strsplit(x, ": ")
setNames(sapply(parts, function(y) y[2]), sapply(parts, function(y) paste0("Antwort3", y[1])))
}))
# Combine the new columns with the original data frame
data_p <- cbind(data[c(1,2,3)], new_columns, new_columns2, new_columns3)
# Rename the columns
colnames(data_p) <- c("gender", "age", "academic.program",
"test.prep.dur", "test.prep.bef","test.prep.af","ects.fail.dur","semesters.dur",
"ects.fail.bef","semesters.bef","ects.fail.af","semesters.af",
"source.dur","source.bef","source.af")
# Replace values based on condition
data_p$academic.program <- ifelse(grepl("Data Science", data_p$academic.program), "Data Science / MSc / TU WIen", data_p$academic.program)
data_p$gender = as.factor(data_p$gender)
data_p$academic.program = as.factor(data_p$academic.program)
data_p$source.dur = as.factor(data_p$source.dur)
data_p$source.bef = as.factor(data_p$source.bef)
data_p$source.af = as.factor(data_p$source.af)
#remove NaN
data_p = na.omit(data_p)
data <- read.csv("group_16.csv", header= TRUE, sep=";")
# preprocessing
# Split the string into parts
split_parts <- strsplit(data$Antwort.1, "; ")
split_parts2 <- strsplit(data$Antwort.2, "; ")
split_parts3 <- strsplit(data$Antwort.3, "; ")
# Create new columns based on split parts
new_columns <- t(sapply(split_parts, function(x) {
parts <- strsplit(x, ": ")
setNames(as.numeric(sapply(parts, function(y) y[2])), sapply(parts, function(y) paste0("Antwort1", y[1])))
}))
new_columns2 <- t(sapply(split_parts2, function(x) {
parts <- strsplit(x, ": ")
setNames(as.numeric(sapply(parts, function(y) y[2])), sapply(parts, function(y) paste0("Antwort2", y[1])))
}))
new_columns3 <- t(sapply(split_parts3, function(x) {
parts <- strsplit(x, ": ")
setNames(sapply(parts, function(y) y[2]), sapply(parts, function(y) paste0("Antwort3", y[1])))
}))
# Combine the new columns with the original data frame
data_p <- cbind(data[c(1,2,3)], new_columns, new_columns2, new_columns3)
# Rename the columns
colnames(data_p) <- c("gender", "age", "academic.program",
"test.prep.dur", "test.prep.bef","test.prep.af","ects.fail.dur","semesters.dur",
"ects.fail.bef","semesters.bef","ects.fail.af","semesters.af",
"source.dur","source.bef","source.af")
# Replace values based on condition
data_p$academic.program <- ifelse(grepl("Data Science", data_p$academic.program), "Data Science / MSc / TU WIen", data_p$academic.program)
data_p$gender = as.factor(data_p$gender)
data_p$academic.program = as.factor(data_p$academic.program)
data_p$source.dur = as.factor(data_p$source.dur)
data_p$source.bef = as.factor(data_p$source.bef)
data_p$source.af = as.factor(data_p$source.af)
#remove NaN
data_p = na.omit(data_p)
#print out statistics
# Convert the data frame to long format
data_long <- data_p %>%
pivot_longer(cols = c(test.prep.bef,test.prep.dur,test.prep.af), names_to = "Period", values_to = "Hours")
library(ggplot2)
library(dplyr)
library("tidyverse")
#install.packages("gridExtra")
library(gridExtra)
library(gt)
library(ggplot2)
library(dplyr)
library("tidyverse")
install.packages("gt")
library(gridExtra)
library(gt)
library(scales)
library(readr)
library(ggplot2)
library(dplyr)
library("tidyverse")
#install.packages("gt")
library(gridExtra)
library(gt)
library(scales)
library(readr)
data <- read.csv("group_16.csv", header= TRUE, sep=";")
# preprocessing
# Split the string into parts
split_parts <- strsplit(data$Antwort.1, "; ")
split_parts2 <- strsplit(data$Antwort.2, "; ")
split_parts3 <- strsplit(data$Antwort.3, "; ")
# Create new columns based on split parts
new_columns <- t(sapply(split_parts, function(x) {
parts <- strsplit(x, ": ")
setNames(as.numeric(sapply(parts, function(y) y[2])), sapply(parts, function(y) paste0("Antwort1", y[1])))
}))
new_columns2 <- t(sapply(split_parts2, function(x) {
parts <- strsplit(x, ": ")
setNames(as.numeric(sapply(parts, function(y) y[2])), sapply(parts, function(y) paste0("Antwort2", y[1])))
}))
new_columns3 <- t(sapply(split_parts3, function(x) {
parts <- strsplit(x, ": ")
setNames(sapply(parts, function(y) y[2]), sapply(parts, function(y) paste0("Antwort3", y[1])))
}))
# Combine the new columns with the original data frame
data_p <- cbind(data[c(1,2,3)], new_columns, new_columns2, new_columns3)
# Rename the columns
colnames(data_p) <- c("gender", "age", "academic.program",
"test.prep.dur", "test.prep.bef","test.prep.af","ects.fail.dur","semesters.dur",
"ects.fail.bef","semesters.bef","ects.fail.af","semesters.af",
"source.dur","source.bef","source.af")
# Replace values based on condition
data_p$academic.program <- ifelse(grepl("Data Science", data_p$academic.program), "Data Science / MSc / TU WIen", data_p$academic.program)
data_p$gender = as.factor(data_p$gender)
data_p$academic.program = as.factor(data_p$academic.program)
data_p$source.dur = as.factor(data_p$source.dur)
data_p$source.bef = as.factor(data_p$source.bef)
data_p$source.af = as.factor(data_p$source.af)
#remove NaN
data_p = na.omit(data_p)
#print out statistics
# Convert the data frame to long format
data_long <- data_p %>%
pivot_longer(cols = c(test.prep.bef,test.prep.dur,test.prep.af), names_to = "Period", values_to = "Hours")
# Calculate statistics for each time period
statistics <- data_long %>%
group_by(Period) %>%
summarize(
Mean = mean(Hours),
Median = median(Hours),
SD = sd(Hours)
)
# Print the formatted statistics
print(statistics)
# Create a boxplot for each column
# we exclude row 21 because of unrealistic values
ggplot(data_p[-20,]) +
geom_boxplot(aes(x = "Before", y = test.prep.bef), fill = "lightblue", color = "black") +
geom_boxplot(aes(x = "During", y = test.prep.dur), fill = "lightgreen", color = "black") +
geom_boxplot(aes(x = "After", y = test.prep.af), fill = "lightyellow", color = "black") +
labs(x = "Time Period", y = "Hours", title = "Average Test Preparation Hours Comparison") +
scale_x_discrete(labels = c("Before" = "Before COVID-19", "During" = "During COVID-19", "After" = "After COVID-19"))
#head(data_p[c(7:12)])
data_p <- data_p %>%
mutate(performance_dur = ects.fail.dur / semesters.dur) %>%
mutate(performance_bef = ects.fail.bef / semesters.bef) %>%
mutate(performance_af = ects.fail.af / semesters.af)
#print out statistics
stats <- data_p %>%
summarise(
Performance_Dur = mean(performance_dur[is.finite(performance_dur)], na.rm = TRUE),
Performance_Bef = mean(performance_bef[is.finite(performance_bef)], na.rm = TRUE),
Performance_Af = mean(performance_af[is.finite(performance_af)], na.rm = TRUE)
)
print(stats)
# Combine the performance metrics for all periods into a single data frame
performance <- data.frame(
period = rep(c("During", "Before", "After"), each = nrow(data_p)),
performance = c(data_p$performance_dur, data_p$performance_bef, data_p$performance_af),
stringsAsFactors = FALSE
)
# Create separate histograms for each period
hist_bef <- ggplot(data_p, aes(x = performance_bef)) +
geom_histogram(binwidth = 2, fill = "red", alpha = 0.7, color="black") +
labs(x = "", y = "Count") +
ggtitle("Before COVID-19") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(aes(xintercept = mean(performance_bef)), color = "black", linetype = "dashed")
hist_dur <- ggplot(data_p, aes(x = performance_dur)) +
geom_histogram(binwidth = 2, fill = "green", alpha = 0.7, color="black") +
labs(x = "", y = "Count") +
ggtitle("During COVID-19") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(aes(xintercept = mean(performance_dur)), color = "black", linetype = "dashed")
hist_af <- ggplot(data_p, aes(x = performance_af)) +
geom_histogram(binwidth = 2, fill = "blue", alpha = 0.7, color="black") +
labs(x = "", y = "Count") +
ggtitle("After COVID-19") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(aes(xintercept = mean(performance_af)), color = "black", linetype = "dashed")
# Arrange the histograms in subplots
subplot <- grid.arrange(hist_bef, hist_dur, hist_af, nrow = 1,
bottom="failed ECTS / attended Semester Ratio")
# Display the subplots
subplot
#head(data_p[c(7:12)])
data_p <- data_p %>%
mutate(performance_dur = ects.fail.dur / semesters.dur) %>%
mutate(performance_bef = ects.fail.bef / semesters.bef) %>%
mutate(performance_af = ects.fail.af / semesters.af)
#print out statistics
stats <- data_p %>%
summarise(
Performance_Dur = mean(performance_dur[is.finite(performance_dur)], na.rm = TRUE),
Performance_Bef = mean(performance_bef[is.finite(performance_bef)], na.rm = TRUE),
Performance_Af = mean(performance_af[is.finite(performance_af)], na.rm = TRUE)
)
print(stats)
# Combine the performance metrics for all periods into a single data frame
performance <- data.frame(
period = rep(c("During", "Before", "After"), each = nrow(data_p)),
performance = c(data_p$performance_dur, data_p$performance_bef, data_p$performance_af),
stringsAsFactors = FALSE
)
# Create separate histograms for each period
hist_bef <- ggplot(data_p, aes(x = performance_bef)) +
geom_histogram(binwidth = 2, fill = "lightblue", alpha = 0.7, color="black") +
labs(x = "", y = "Count") +
ggtitle("Before COVID-19") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(aes(xintercept = mean(performance_bef)), color = "black", linetype = "dashed")
hist_dur <- ggplot(data_p, aes(x = performance_dur)) +
geom_histogram(binwidth = 2, fill = "lightgreen", alpha = 0.7, color="black") +
labs(x = "", y = "Count") +
ggtitle("During COVID-19") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(aes(xintercept = mean(performance_dur)), color = "black", linetype = "dashed")
hist_af <- ggplot(data_p, aes(x = performance_af)) +
geom_histogram(binwidth = 2, fill = "lightyellow", alpha = 0.7, color="black") +
labs(x = "", y = "Count") +
ggtitle("After COVID-19") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(aes(xintercept = mean(performance_af)), color = "black", linetype = "dashed")
# Arrange the histograms in subplots
subplot <- grid.arrange(hist_bef, hist_dur, hist_af, nrow = 1,
bottom="failed ECTS / attended Semester Ratio")
# Display the subplots
subplot
# Calculate the frequency of each label
label_counts <- table(data_p$source.bef)
label_counts2 <- table(data_p$source.dur)
label_counts3 <- table(data_p$source.af)
# Convert counts to proportions
label_proportions <- prop.table(label_counts)
label_proportions2 <- prop.table(label_counts2)
label_proportions3 <- prop.table(label_counts3)
# Create a data frame for plotting
plot_data <- data.frame(labels = names(label_proportions),
proportions = label_proportions)
plot_data2 <- data.frame(labels = names(label_proportions2),
proportions = label_proportions2)
plot_data3 <- data.frame(labels = names(label_proportions3),
proportions = label_proportions3)
# Create a pie plot using ggplot2
pie_plot <- ggplot(plot_data, aes(x = "", y = proportions.Freq, fill = labels)) +
geom_bar(stat = "identity", width = 1, color="white") +
coord_polar("y", start = 0) +
#scale_fill_discrete(name = "Labels") +
labs(title = "Before Corona") +
geom_text(aes(label = paste0(round(proportions.Freq * 100, 2), "%")), position = position_stack(vjust = 0.5))+
theme_void()+
theme(legend.position = "none")
pie_plot2 <- ggplot(plot_data2, aes(x = "", y = proportions.Freq, fill = labels)) +
geom_bar(stat = "identity", width = 1, color="white") +
coord_polar("y", start = 0) +
#scale_fill_discrete(name = "Labels") +
geom_text(aes(label = paste0(round(proportions.Freq * 100, 2), "%")), position = position_stack(vjust = 0.5))+
labs(title = "During Corona") +
theme_void()+
theme(legend.position = "none")
pie_plot3 <- ggplot(plot_data3, aes(x = "", y = proportions.Freq, fill = labels)) +
geom_bar(stat = "identity", width = 1, color="white") +
coord_polar("y", start = 0) +
scale_fill_discrete(name = "Labels") +
geom_text(aes(label = paste0(round(proportions.Freq * 100, 2), "%")), position = position_stack(vjust = 0.5))+
labs(title = "After Corona") +
theme_void()
#theme(legend.position = "none")
# Arrange the histograms in subplots
subplot <- grid.arrange(pie_plot,pie_plot2,pie_plot3, nrow = 1,
bottom="Proportion of Learning Source")
# Display the subplots
subplot
intervals = c(0,10, 20, 30, 40, 50, 60, 70, 80, Inf)
summary_palette = c("white", "darkblue")
cnt_bef <- data_p %>%
select(test.prep.bef) %>%
group_by(interval_bef = cut(test.prep.bef, breaks = intervals, right=FALSE)) %>%
count() %>%
spread(interval_bef, n)
cnt_dur <- data_p %>%
select(test.prep.dur) %>%
group_by(interval_dur = cut(test.prep.dur, breaks = intervals, right=FALSE)) %>%
count() %>%
spread(interval_dur, n)
cnt_af <- data_p %>%
select(test.prep.af) %>%
group_by(interval_af = cut(test.prep.af, breaks = intervals, right=FALSE)) %>%
count() %>%
spread(interval_af, n)
inferential_summary_preparation <- bind_rows(cnt_bef, cnt_dur, cnt_af) %>%
mutate(index = c("Before COVID", "During COVID", "After COVID")) %>%
replace(is.na(.), 0) %>%
select(index, "[0,10)", "[10,20)", "[20,30)", "[30,40)", "[40,50)", "[50,60)", "[60,70)", "[70,80)", "[80,Inf)")
inferential_summary_preparation %>%
gt() %>%
tab_header(
title = md("**Preparation Time**"),
subtitle = md("*Amount of students who prepared for the exam for x hours*")
) %>%
data_color(
columns = 2:10,
fn = col_numeric(
palette = summary_palette,
domain = c(0, 13)
)
)
intervals_diff = c(-Inf, -20, -10, -5, 0, 1, 5, 10, 20, Inf)
# Difference in preparation time
prep_diff <- data_p %>%
select(test.prep.bef, test.prep.dur, test.prep.af) %>%
mutate(diff_dur = test.prep.dur - test.prep.bef,
diff_af = test.prep.af - test.prep.bef) %>%
select(diff_dur, diff_af)
# prep_diff
cnt_diff_dur <- prep_diff %>%
select(diff_dur) %>%
group_by(interval_dur = cut(diff_dur, breaks = intervals_diff, right=FALSE)) %>%
count() %>%
spread(interval_dur, n)
cnt_diff_af <- prep_diff %>%
select(diff_af) %>%
group_by(interval_af = cut(diff_af, breaks = intervals_diff, right=FALSE)) %>%
count() %>%
spread(interval_af, n)
inferential_summary_preparation_diff <- bind_rows(cnt_diff_dur, cnt_diff_af) %>%
mutate(index = c("Difference During COVID", "Difference After COVID")) %>%
replace(is.na(.), 0) %>%
select(index, everything())
inferential_summary_preparation_diff %>%
gt() %>%
tab_header(
title = md("**Preparation Time Difference**"),
subtitle = md("*Amount of students who prepared x hours more/less for an exam for during and after COVID, base before COVID*")
) %>%
data_color(
columns = 2:10,
fn = col_numeric(
palette = summary_palette,
domain = c(0, 17)
)
)
# Inferential summary for performance
intervals = c(0, 1, 2, 3, 4, 5, 6, 7, Inf)
summary_performance <- data_p %>%
select(performance_bef, performance_dur, performance_af) %>%
mutate(perf_diff_dur = performance_dur - performance_bef,
perf_diff_af = performance_af - performance_bef)
perf_cnt_bef <- summary_performance %>%
select(performance_bef) %>%
group_by(interval_bef = cut(performance_bef, breaks = intervals, right=FALSE)) %>%
count() %>%
spread(interval_bef, n)
perf_cnt_dur <- summary_performance %>%
select(performance_dur) %>%
group_by(interval_dur = cut(performance_dur, breaks = intervals, right=FALSE)) %>%
count() %>%
spread(interval_dur, n)
perf_cnt_af <- summary_performance %>%
select(performance_af) %>%
group_by(interval_af = cut(performance_af, breaks = intervals, right=FALSE)) %>%
count() %>%
spread(interval_af, n)
inferential_summary_perf <- bind_rows(perf_cnt_bef, perf_cnt_dur, perf_cnt_af) %>%
mutate(index = c("Before COVID", "During COVID", "After COVID")) %>%
replace(is.na(.), 0) %>%
select(index, "[0,1)", "[1,2)", "[2,3)", "[3,4)", "[4,5)", "[5,6)", "[6,7)", "[7,Inf)", everything())
inferential_summary_perf %>%
gt() %>%
tab_header(
title = md("**Failure Rate**"),
subtitle = md("*Amount of Students who failed x ECTS*")
) %>%
data_color(
columns = 2:9,
fn = col_numeric(
palette = summary_palette,
domain = c(0, 16)
)
)
intervals_diff = c(-Inf, -5, -2, -1, 0, 1, 2, 5, Inf)
perf_cnt_diff_dur <- summary_performance %>%
select(perf_diff_dur) %>%
group_by(interval_dur = cut(perf_diff_dur, breaks = intervals_diff, right=FALSE)) %>%
count() %>%
spread(interval_dur, n)
perf_cnt_diff_af <- summary_performance %>%
select(perf_diff_af) %>%
group_by(interval_af = cut(perf_diff_af, breaks = intervals_diff, right=FALSE)) %>%
count() %>%
spread(interval_af, n)
inferential_summary_perf_diff <- bind_rows(perf_cnt_diff_dur, perf_cnt_diff_af) %>%
replace(is.na(.), 0) %>%
mutate(index = c("Difference During COVID", "Difference After COVID")) %>%
select(index, "[-Inf,-5)", "[-5,-2)", everything())
inferential_summary_perf_diff %>%
gt() %>%
tab_header(
title = md("**Failure Rate Difference**"),
subtitle = md("*Amount of students with x different failed ECTS per semester for during and after COVID with base before COVID*")
) %>%
data_color(
columns = 2:9,
fn = col_numeric(
palette = summary_palette,
domain = c(0, 13)
)
)
# Inferential summary for learning sources
summary_learningsources <- data_p %>%
select(source.bef, source.dur, source.af)
source_cnt_bef <- summary_learningsources %>%
select(source.bef) %>%
group_by(source.bef) %>%
count() %>%
spread(source.bef, n)
source_cnt_dur <- summary_learningsources %>%
select(source.dur) %>%
group_by(source.dur) %>%
count() %>%
spread(source.dur, n)
source_cnt_af <- summary_learningsources %>%
select(source.af) %>%
group_by(source.af) %>%
count() %>%
spread(source.af, n)
inferential_summary_sources <- bind_rows(source_cnt_bef, source_cnt_dur, source_cnt_af) %>%
mutate(index = c("Before COVID", "During COVID", "After COVID")) %>%
select(index, External, Internal)
inferential_summary_sources %>%
gt() %>%
tab_header(
title = md("**Learning Sources**"),
subtitle = md("*Amount of students who used x learning source*")
) %>%
data_color(
columns = 2:3,
fn = col_numeric(
palette = summary_palette,
domain = c(0, 30)
)
)
sources_diff_dur <- summary_learningsources %>%
group_by(source.bef, source.dur) %>%
count() %>%
mutate(from = source.bef,
to = source.dur,
during = n) %>%
ungroup() %>%
select(from, to, during)
sources_diff_af <- summary_learningsources %>%
group_by(source.bef, source.af) %>%
count() %>%
mutate(from = source.bef,
to = source.af,
after = n) %>%
ungroup() %>%
select(from, to, after)
inferential_summary_sources_diff<- bind_cols(sources_diff_dur %>% select(during), sources_diff_af) %>%
select(from, to, during, after)
inferential_summary_sources_diff %>%
gt() %>%
tab_header(
title = md("**Learning Sources Difference**"),
subtitle = md("*Amount of students who switched learning source during and after COVID with base before COVID*")
) %>%
data_color(
columns = 3:4,
fn = col_numeric(
palette = summary_palette,
domain = c(0, 25)
)
)
